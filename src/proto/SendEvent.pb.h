// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SendEvent.proto

#ifndef PROTOBUF_SendEvent_2eproto__INCLUDED
#define PROTOBUF_SendEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SendEvent_2eproto();
void protobuf_AssignDesc_SendEvent_2eproto();
void protobuf_ShutdownFile_SendEvent_2eproto();

class SendEventRequest;
class SendEvnetResponse;

// ===================================================================

class SendEventRequest : public ::google::protobuf::Message {
 public:
  SendEventRequest();
  virtual ~SendEventRequest();

  SendEventRequest(const SendEventRequest& from);

  inline SendEventRequest& operator=(const SendEventRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendEventRequest& default_instance();

  void Swap(SendEventRequest* other);

  // implements Message ----------------------------------------------

  SendEventRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendEventRequest& from);
  void MergeFrom(const SendEventRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appId = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // required string event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  inline void set_allocated_event(::std::string* event);

  // required string extra = 3;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 3;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const char* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // @@protoc_insertion_point(class_scope:proto.SendEventRequest)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_extra();
  inline void clear_has_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appid_;
  ::std::string* event_;
  ::std::string* extra_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SendEvent_2eproto();
  friend void protobuf_AssignDesc_SendEvent_2eproto();
  friend void protobuf_ShutdownFile_SendEvent_2eproto();

  void InitAsDefaultInstance();
  static SendEventRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendEvnetResponse : public ::google::protobuf::Message {
 public:
  SendEvnetResponse();
  virtual ~SendEvnetResponse();

  SendEvnetResponse(const SendEvnetResponse& from);

  inline SendEvnetResponse& operator=(const SendEvnetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendEvnetResponse& default_instance();

  void Swap(SendEvnetResponse* other);

  // implements Message ----------------------------------------------

  SendEvnetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendEvnetResponse& from);
  void MergeFrom(const SendEvnetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:proto.SendEvnetResponse)
 private:
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SendEvent_2eproto();
  friend void protobuf_AssignDesc_SendEvent_2eproto();
  friend void protobuf_ShutdownFile_SendEvent_2eproto();

  void InitAsDefaultInstance();
  static SendEvnetResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SendEventRequest

// required string appId = 1;
inline bool SendEventRequest::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendEventRequest::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendEventRequest::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendEventRequest::clear_appid() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& SendEventRequest::appid() const {
  return *appid_;
}
inline void SendEventRequest::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void SendEventRequest::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void SendEventRequest::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendEventRequest::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  return appid_;
}
inline ::std::string* SendEventRequest::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendEventRequest::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string event = 2;
inline bool SendEventRequest::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendEventRequest::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendEventRequest::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendEventRequest::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& SendEventRequest::event() const {
  return *event_;
}
inline void SendEventRequest::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void SendEventRequest::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void SendEventRequest::set_event(const char* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendEventRequest::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* SendEventRequest::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendEventRequest::set_allocated_event(::std::string* event) {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (event) {
    set_has_event();
    event_ = event;
  } else {
    clear_has_event();
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string extra = 3;
inline bool SendEventRequest::has_extra() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendEventRequest::set_has_extra() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendEventRequest::clear_has_extra() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendEventRequest::clear_extra() {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    extra_->clear();
  }
  clear_has_extra();
}
inline const ::std::string& SendEventRequest::extra() const {
  return *extra_;
}
inline void SendEventRequest::set_extra(const ::std::string& value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void SendEventRequest::set_extra(const char* value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void SendEventRequest::set_extra(const char* value, size_t size) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendEventRequest::mutable_extra() {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  return extra_;
}
inline ::std::string* SendEventRequest::release_extra() {
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendEventRequest::set_allocated_extra(::std::string* extra) {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendEvnetResponse

// required string response = 1;
inline bool SendEvnetResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendEvnetResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendEvnetResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendEvnetResponse::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& SendEvnetResponse::response() const {
  return *response_;
}
inline void SendEvnetResponse::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void SendEvnetResponse::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void SendEvnetResponse::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendEvnetResponse::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* SendEvnetResponse::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendEvnetResponse::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SendEvent_2eproto__INCLUDED
